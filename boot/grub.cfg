# dracut arguments
# rd.debug - set -x for dracut
# rd.break=[cmdline|pre-udev|pre-trigger|initqueue|pre-mount|mount|pre-pivot|cleanup]
# rd.hostonly=0 - removes all compiled in configuration of the host system the initramfs image was built on
# rd.shell - drop to a shell, if the initramfs fails.
# rd.live.ram=1 - copy root to ram (boot medai can be removed after booting, requires more system ram)
# rd.udev.info - set udev to loglevel info
# rd.udev.debug - set udev to loglevel debug
# rd.modules_load=
# systemd.volatile=overlay - overlay root and all the subfolders with tmpfs, requires systemd inside initrd
# systemd.volatile=yes  - requires systemd inside initrd
# systemd.volatile=state - requires systemd inside initrd, empty /var

# kernel arguments
# root=LABEL=linux - boot form the partition with "linux" label
# rootflags=subvol=/linux - boot from /linux btrfs subvolume (and not the default filesystem subvolume)
# ro - mount root read-only
# quiet - do not log to console during boot
# noquiet
# net.ifnames=0 - disable consistent network device naming, udevd
# nomodeset
# modules_load=

# systemd arguments
# systemd.wants
# systemd.mask
# systemd.hostname
# systemd.unit=multi-user.target

# ds=nocloud;s=/run/media/efi/config
# systemd.wants=ssh-keygen
# rd.exec=/dev/null

#set CONSOLE="nomodeset systemd.unit=multi-user.target systemd.want=getty@tty1.service"

# Disable services trying to write to /var/log or /var
# set RO="$CONSOLE systemd.mask=dmesg systemd.mask=systemd-update-utmp systemd.mask=systemd-update-utmp-runlevel"

# todo - multiple initrd does not seem to work, probably because squashfs is not supported for modules
# idea - mount the entrire initrd after boot, instead of a separate modules files
# https://bugs.launchpad.net/ubuntu/+source/grub2/+bug/1878705
# or I do not understand how it suppose to work

# grub does not know about btrfs and btrfs labels
# grub does not know about nvme drives

# Default hostname
set h=localhost

# Read smbios (a.k.a dmi)

# dmidecode -s bios-vendor
smbios --type 0 --get-string 4 --set smbios_bios

set timeout=5
set default=linux_iso

# Default partition label for iso files
set isolabel=iso

# determine default menu item

# Default rootfs label
set l=linux

# Optical drive (CD/DVD) - bios boot
if [ "$root" == "hd31" ]; then
  root=(cd,msdos1)
  set default=linux_cdrom
fi

# Optical drive (CD/DVD) - efi boot
if [ "$root" == "cd0" ]; then
  set default=linux_cdrom
fi

# Test if running as a vm - vmware, qemu bios, qemu uefi, ovmf
if [ "$smbios_bios" == "VMware, Inc." -o "$smbios_bios" == "SeaBIOS" -o "$smbios_bios" == "EFI Development Kit II / OVMF" ]; then
  set timeout=1
  set timeout_style=hidden
  OVERRIDE="module_blacklist=pata_acpi,input_leds,i2c_piix4,serio_raw,joydev systemd.mask=udisks2 systemd.mask=smartmontools systemd.mask=ssh systemd.mask=NetworkManager systemd.mask=NetworkManager-wait-online systemd.mask=bluetooth systemd.mask=vgauth systemd.mask=getty@tty1"
fi

# Test if running on baremetal
if ! [ "$default" == "linux_cdrom" ]; then
  # dmidecode -s baseboard-product-name
  smbios --type 2 --get-string 5 --set smbios_baseboard

  # dmidecode -s system-product-name
  smbios --type 1 --get-string 5 --set smbios_system

  if [ "$smbios_baseboard" == "DX79TO" ]; then
  # module_blacklist=nouveau - this is required to load nvidia. nouveau is not stable on bestia
    set h=bestia
    set timeout=1
    OVERRIDE="module_blacklist=nouveau,sb_edac systemd.mask=NetworkManager.service systemd.mask=NetworkManager-wait-online.service"

    set isolabel=EFI
    set default=linux_btrfs
  fi

  if [ "$smbios_system" == "Z83-4" ]; then
    set h=desk
    OVERRIDE="module_blacklist=bluetooth,nouveau,cfg80211,dm_mirror,dw_dmac,dw_dmac_core systemd.mask=dmesg.service systemd.mask=getty@tty1.service systemd.mask=NetworkManager.service systemd.mask=NetworkManager-wait-online.service"
  fi

  if [ "$smbios_system" == "Z83-4 Pro" ]; then
    set h=pincer
    set isolabel=EFI
    set timeout=0

    # Disable Wifi, bluetooth, sound kernel modules
    # dw_dmac and dw_dmac_core can cause hang at reboot on Minix
    OVERRIDE="module_blacklist=bluetooth,nouveau,cfg80211,soundcore,dm_mirror,dw_dmac,dw_dmac_core systemd.mask=home-img.service systemd.mask=run-initramfs-home-lower.mount systemd.mask=dmesg.service systemd.mask=getty@tty1.service systemd.mask=NetworkManager.service systemd.mask=NetworkManager-wait-online.service systemd.unit=multi-user.target systemd.wants=nginx.service"
  fi

  if [ "$smbios_baseboard" == "Mac-3CBD00234E554E41" ]; then
    set h=taska
  fi
fi

# rd.live.overlay
# rd.live.overlay.readonly - this can be used to have 2 base mounts - rd.live.overlay.readonly=1 rd.live.overlay=LABEL=linux
# todo - add support for persistent overlay rd.live.overlay and for rd.live.ram=1
# todo rd.live.overlay rd.live.overlay.readonly=1 rd.live.overlay=/run/initramfs/live/LiveOS/home.img"
# todo rd.live.overlay=none rd.live.overlay.readonly
# todo - kexec only supports one initrd

set DEFAULT="rd.live.image rd.live.overlay.overlayfs=1 ro systemd.hostname=$h net.ifnames=0 quiet"

set DEFAULT_BTRFS="$DEFAULT root=LABEL=$l rootfstype=btrfs"
set DEFAULT_ISO="$DEFAULT root=live:CDLABEL=ISO"

#if [ -s /dotfiles/bin/infra-init.sh ]; then
#  set RDEXEC="rd.exec=dotfiles/bin/infra-init.sh"
#fi

if [ -s /config/grub.cfg ]; then
  source /config/grub.cfg
fi

menuentry linux_iso $DEFAULT_ISO $OVERRIDE  {
  search --no-floppy --label $isolabel --set=linuxroot
  set isofile="/linux.iso"
  loopback loop ($linuxroot)/$isofile
  linux (loop)/kernel/vmlinuz iso-scan/filename=$isofile $*
  initrd (loop)/kernel/initrd.img
}

menuentry linux_btrfs $DEFAULT_BTRFS $OVERRIDE {
  linux /kernel/vmlinuz $*
  initrd /kernel/initrd.img
}

menuentry linux_cdrom $DEFAULT_ISO $OVERRIDE {
  linux /kernel/vmlinuz $*
  initrd /kernel/initrd.img
}

######################################## CHAIN

menuentry debug_linux_cdrom_ram $DEFAULT_ISO rd.live.ram=1 $OVERRIDE {
  linux /kernel/vmlinuz $*
  initrd /kernel/initrd.img
}

menuentry debug_linux_btrfs_ram $DEFAULT_BTRFS rd.live.ram=1 $OVERRIDE {
  linux /kernel/vmlinuz $*
  initrd /kernel/initrd.img
}

menuentry debug_linux_only_root_from_iso $DEFAULT_ISO $OVERRIDE  {
  set isofile="/linux.iso"
  linux /kernel/vmlinuz iso-scan/filename=$isofile $*
  initrd /kernel/initrd.img
}

######################################## CHAIN

submenu chain {

menuentry menu_chain_0 {
  # hd0 is the best guess for the disk attached to the host
  set root=(hd0,1)
  chainloader +1
}

# Test booting from backup
menuentry menu_chain_1 {
  set root=(hd1,1)
  chainloader +1
}

menuentry menu_backup {
  search --no-floppy --set efi_backup --label EFI_BACKUP
  set root=$efi_backup
  configfile /efi/boot/grub.cfg
}

menuentry menu_live {
  search --no-floppy --set efi_live --label EFI_LIVE
  set root=$efi_live
  configfile /efi/boot/grub.cfg
}

}

######################################## WINDOWS

submenu windows {

menuentry windows_bios {
  search --no-floppy --label Windows --set=root
  ntldr /bootmgr
}

menuentry windows_efi {
  # Windows EFI (not BIOS)
  chainloader /EFI/Microsoft/Boot/bootmgfw.efi
}

menuentry windows {
	search --no-floppy --label Windows --set=root
	chainloader +1
}

}

######################################## LIVE

#### netboot

# PXE boot - requires wired networking and not all ethernet cards are supported
# Debian based distros (debian, ubuntu, mint, popos, elementary, zorin, kdeneon, deepin, kali, sparkylinux, Q4OS, tails)
# hrmpf (void), tinycore, fatdog, endeavouros (arch), fedora (rpm)
# console boot and installer (bsd, alpine, arch, centos)
menuentry netboot {
  if [ "${grub_platform}" == "efi" ]; then
    chainloader /netboot/netboot.xyz.efi
  else
    linux16 /netboot/netboot.xyz.lkrn
  fi
}

#### Tinycore

if [ -s "/tce/tce.iso" ]; then
menuentry tinycore {
  set isofile="/tce/tce.iso"
  loopback loop $isofile
  linux (loop)/boot/vmlinuz64 iso=$isofile nozswap
  initrd (loop)/boot/corepure64.gz
}
fi

# deb, lightweight, LXQt, openbox
menuentry lubuntu {
  search --no-floppy --label $isolabel --set=isoroot
  set isofile="/lubuntu.iso"
  loopback loop ($isoroot)/$isofile
  linux (loop)/casper/vmlinuz boot=casper iso-scan/filename=$isofile noprompt noeject --
  initrd (loop)/casper/initrd
}

# deb, chromium, most packages
menuentry knoppix {
  search --no-floppy --label $isolabel --set=isoroot
  set isofile="/KNOPPIX.iso"
  loopback loop ($isoroot)/$isofile
  linux (loop)/boot/isolinux/linux64 bootfrom=/mnt-iso/$isofile lang=en no3d
  initrd (loop)/boot/isolinux/minirt.gz
}

# rpm, RedHat, GNOME
menuentry fedora {
  search --no-floppy --label $isolabel --set=isoroot
  set isofile="/Fedora-Workstation.iso"
  loopback loop ($isoroot)/$isofile
  linux (loop)/isolinux/vmlinuz iso-scan/filename=$isofile root=live:CDLABEL=Fedora-WS-Live-35-1-2 rd.live.image
  initrd (loop)/isolinux/initrd.img
}

# arch, consoleboot, xfce, sshd, small image, runram
menuentry systemrescue {
  search --no-floppy --label $isolabel --set=isoroot
  set iso="/systemrescue.iso"
  loopback loop ($isoroot)/$iso
  linux (loop)/sysresccd/boot/x86_64/vmlinuz img_label=$isolabel img_loop=$iso archisobasedir=sysresccd copytoram setkmap=us nofirewall dodhcp rootpass=root
  initrd (loop)/sysresccd/boot/intel_ucode.img (loop)/sysresccd/boot/amd_ucode.img (loop)/sysresccd/boot/x86_64/sysresccd.img
}

if [ -s /grubenv ]; then
  load_env --file /grubenv
fi
