set timeout=5
set default=linux_iso
set fallback=linux_iso_fallback

set CONSOLE="nomodeset systemd.unit=multi-user.target systemd.wants=getty@tty1.service"

# Default hostname
set h=localhost

# Read smbios (dmi)

# dmidecode -s bios-vendor
smbios --type 0 --get-string 4 --set smbios_bios

# Default partition label for iso files
set isolabel=isos

# determine default menu item

# Default rootfs label
set l=linux

# Optical drive (CD/DVD) - bios boot
if [ "$root" == "hd31" ]; then
  root=(cd,msdos1)
  set default=linux_cdrom
fi

# Optical drive (CD/DVD) - efi boot
if [ "$root" == "cd0" ]; then
  set default=linux_cdrom
fi

# Test if running as a vm - vmware, qemu bios, qemu uefi, ovmf
if [ "$smbios_bios" == "VMware, Inc." -o "$smbios_bios" == "SeaBIOS" -o "$smbios_bios" == "EFI Development Kit II / OVMF" ]; then
  set timeout=1
  set timeout_style=hidden
  OVERRIDE="module_blacklist=pata_acpi,input_leds,i2c_piix4,serio_raw,joydev systemd.mask=udisks2 systemd.mask=ssh systemd.mask=bluetooth systemd.mask=vgauth systemd.mask=getty@tty1"
fi

# Test if running on baremetal
if ! [ "$default" == "linux_cdrom" ]; then
  # dmidecode -s baseboard-product-name
  smbios --type 2 --get-string 5 --set smbios_baseboard

  # dmidecode -s system-product-name
  smbios --type 1 --get-string 5 --set smbios_system

  if [ "$smbios_baseboard" == "DX79TO" ]; then
    set h=nagybestia
    set timeout=1
    OVERRIDE="systemd.unit=multi-user.target nomodeset module_blacklist=sb_edac systemd.machine_id=6a652608ca464b8db5b0270c340dfd23"
    set isolabel=EFI
  fi

  if [ "$smbios_baseboard" == "4391B84" ]; then
    # Lenovo W510
    set isolabel=Ventoy
    set h=w
  fi

  if [ "$smbios_baseboard" == "Default string" ]; then
    set h=bestia
    OVERRIDE="systemd.unit=multi-user.target net.ifnames=1 systemd.mask=systemd-resolved systemd.mask=bluetooth systemd.wants=docker systemd.wants=dnsmasq systemd.wants=apcupsd systemd.wants=rpcbind systemd.wants=nfs-server systemd.wants=rpc-statd systemd.machine_id=6a652608ca464b8db5b0270c340dfd23"
  fi

  if [ "$smbios_system" == "Z83-4" ]; then
    set h=desk
    OVERRIDE="reboot=bios module_blacklist=bluetooth,nouveau,cfg80211,dm_mirror,dw_dmac,dw_dmac_core systemd.mask=dmesg.service systemd.mask=getty@tty1.service"
  fi

  if [ "$smbios_system" == "Z83-4 Pro" ]; then
    set h=kispincer
    set isolabel=EFI
    set timeout=0

    # Disable Wifi, bluetooth, sound kernel modules
    # dw_dmac and dw_dmac_core can cause hang at reboot on Minix
    OVERRIDE="reboot=bios module_blacklist=bluetooth,nouveau,cfg80211,soundcore,dm_mirror,dw_dmac,dw_dmac_core systemd.mask=home systemd.mask=dmesg systemd.mask=getty@tty1 systemd.unit=multi-user.target"
  fi

  if [ "$smbios_baseboard" == "Mac-3CBD00234E554E41" ]; then
    set h=taska
  fi

  if [ "$smbios_baseboard" == "NP700G7C-S02US" ]; then
    set h=p
    set isolabel=EFI
  fi
fi

# rd.live.overlay
# rd.live.overlay.readonly - this can be used to have 2 base mounts - rd.live.overlay.readonly=1 rd.live.overlay=LABEL=linux
# todo - add support for persistent overlay rd.live.overlay and for rd.live.ram=1
# todo rd.live.overlay rd.live.overlay.readonly=1 rd.live.overlay=/run/initramfs/live/LiveOS/home.img"
# todo rd.live.overlay=none rd.live.overlay.readonly
# todo - kexec only supports one initrd

# TODO - get rid of preloading ntfs - at least on e.g. nagybestia
# if booting on known system - e.g. nagybestia - do not use initrd file
# todo - get rid of rd.live.overlay.overlayfs

set DEFAULT_ISO="rd.live.overlay.overlayfs=1 root=live:/dev/disk/by-label/ISO systemd.hostname=$h net.ifnames=0 quiet rd.driver.pre=exfat rd.retry=5"

if [ -s /config/grub.cfg ]; then
  source /config/grub.cfg
fi

# todo - make a loop to inluce all initrd

menuentry linux_iso $DEFAULT_ISO $OVERRIDE  {
  search --no-floppy --label $isolabel --set=linuxroot
  set isofile="linux.iso"
  loopback loop ($linuxroot)/$isofile
  linux (loop)/kernel/vmlinuz iso-scan/filename=$isofile $*
  initrd (loop)/kernel/initrd*.img
}

# vm
menuentry linux_cdrom $DEFAULT_ISO $OVERRIDE {
  linux /kernel/vmlinuz $*
  initrd /kernel/initrd*.img
}

# chain
menuentry menu_chain {
  chainloader /kernel/vmlinuz helloka
}

########################################

menuentry debug_linux_cdrom_ram $DEFAULT_ISO rd.live.ram=1 $OVERRIDE {
  linux /kernel/vmlinuz $*
  initrd /kernel/initrd*.img
}

menuentry debug_linux_only_root_from_iso $DEFAULT_ISO $OVERRIDE  {
  set isofile="/isos/linux.iso"
  linux /kernel/vmlinuz iso-scan/filename=$isofile $*
  initrd /kernel/initrd*.img
}

######################################## CHAIN

submenu chain {

menuentry menu_chain_0 {
  # hd0 is the best guess for the disk attached to the host
  set root=(hd0,gpt1)
  chainloader +1
}

# Test booting from backup
menuentry menu_chain_1 {
  set root=(hd1,1)
  chainloader +1
}

menuentry menu_backup {
  search --no-floppy --set efi_backup --label EFI_BACKUP
  set root=$efi_backup
  configfile /efi/boot/grub.cfg
}

menuentry menu_live {
  search --no-floppy --set efi_live --label EFI_LIVE
  set root=$efi_live
  configfile /efi/boot/grub.cfg
}

}

######################################## WINDOWS

submenu windows {

menuentry windows_bios {
  search --no-floppy --label Windows --set=root
  ntldr /bootmgr
}

menuentry windows_efi {
  # Windows EFI (not BIOS)
  chainloader /EFI/Microsoft/Boot/bootmgfw.efi
}

menuentry windows {
	search --no-floppy --label Windows --set=root
	chainloader +1
}

}

######################################## LIVE

#### netboot

# PXE boot - requires wired networking and not all ethernet cards are supported
# Debian based distros (debian, ubuntu, mint, popos, elementary, zorin, kdeneon, deepin, kali, sparkylinux, Q4OS, tails)
# hrmpf (void), tinycore, fatdog, endeavouros (arch), fedora (rpm)
# console boot and installer (bsd, alpine, arch, centos)
# todo - grab netboot from inside iso
menuentry netboot {
  if [ "${grub_platform}" == "efi" ]; then
    chainloader /netboot/netboot.xyz.efi
  else
    linux16 /netboot/netboot.xyz.lkrn
  fi
}

#### Tinycore

if [ -s "/tce/tce.iso" ]; then
menuentry tinycore {
  set isofile="/tce/tce.iso"
  loopback loop $isofile
  linux (loop)/boot/vmlinuz64 iso=$isofile nozswap
  initrd (loop)/boot/corepure64.gz
}
fi

# Allow to set default from environment block file
if [ -s /grubenv ]; then
  load_env --file /grubenv

  if [ "${once}" ]; then
    set default="$once"
    set once=
    save_env once
  fi
fi
