# dracut arguments
# rd.luks=0 - disable crypto LUKS detection
# rd.lvm=0 - disable LVM detection
# rd.md=0 - disable MD RAID detection
# rd.dm=0 - disable DM RAID detection
# rd.hostonly=0 - removes all compiled in configuration of the host system the initramfs image was built on

# kernel arguments
# root=LABEL=linux - boot form the partition with "linux" label
# rootflags=subvol=/linux - boot from /linux btrfs subvolume (and not the default filesystem subvolume)
# ro - mount root read-only
# systemd.volatile=overlay - overlay root and all the subfolders with tmpfs
# quiet - do not log to console during boot
# net.ifnames=0 - disable consistent network device naming

# Documentation of some additional arguments
# systemd.wants
# systemd.mask

# btrfs is not builtin module in the kernel, so initrd is required to boot
# cat /lib/modules/$(uname -r)/modules.builtin | grep btrfs

set default=0
set label=linux

# Detect smbios

smbios --type 2 --get-string 5 --set smbios_system

# Detect storage

# On some systems search might only search on the one drive that is currently the root

#search --no-floppy --set efi_live --label EFI_LIVE
#search --no-floppy --set efi_backup --label EFI_BACKUP
#search --no-floppy --set efi_win --label EFI_WIN

# Per host configuration file
source /config/grub-host.cfg

source /dotfiles/boot/grub-live.cfg

if [ "$smbios_system" == "DX79TO" ]; then
  set h=bestia
#  set timeout=0

  OVERRIDE="module_blacklist=nouveau acpi_enforce_resources=lax gombi"

  # include live menus
  set l=linux
  source /dotfiles/boot/grub-live.cfg
  # grub-live overrides the default
  set default=linux
fi

if [ "$smbios_system" == "NEO Z83-4" ]; then
  set h=pincer
  set timeout=0

  # Disable Wifi, bluetooth, sound kernel modules
  # dw_dmac and dw_dmac_core can cause hang at reboot on Minix
  OVERRIDE="module_blacklist=bluetooth,nouveau,cfg80211,soundcore,dm_mirror,dw_dmac,dw_dmac_core systemd.unit=multi-user.target"

  # Console boot is the default
  default=linux_console
fi

if [ "$smbios_system" == "Mac-3CBD00234E554E41" ]; then
  set h=taska

  OVERRIDE="rd.dev=by-label/EFI_MAC"
fi

if [ "$smbios_system" == "440BX Desktop Reference Platform" ]; then
  set h=vm
  set timeout=0
  set timeout_style=hidden

  OVERRIDE="systemd.mask=bluetooth.service systemd.mask=getty@tty1.service systemd.mask=vgauth.service systemd.mask=smartmontools.service systemd.mask=ssh.service systemd.mask=NetworkManager.service systemd.mask=wpa_supplicant.service"
fi

set DEFAULT="root=LABEL=$label rootfstype=btrfs ro quiet net.ifnames=0 d.luks=0 rd.lvm=0 rd.md=0 rd.dm=0 rd.hostonly=0 systemd.hostname=$h grub_root=$root grub_system=$smbios_system"
set OVERLAY="systemd.volatile=overlay"
set RDEXEC="$OVERLAY rd.exec=dotfiles/bin/infra-init.sh"
set CONSOLE="nomodeset systemd.unit=multi-user.target debug"

menuentry linux {
  linux /kernel/vmlinuz $DEFAULT $RDEXEC $OVERRIDE
  initrd /kernel/initrd.img
}

menuentry linux_console {
  linux /kernel/vmlinuz $DEFAULT $CONSOLE $RDEXEC $OVERRIDE
  initrd /kernel/initrd.img
}

# no rdexec
menuentry linux_admin {
  linux /kernel/vmlinuz $DEFAULT $OVERLAY $OVERRIDE
  initrd /kernel/initrd.img
}

menuentry linux_console_admin {
  linux /kernel/vmlinuz $DEFAULT $CONSOLE $OVERLAY $OVERRIDE
  initrd /kernel/initrd.img
}

if [ "${efi_live}" ]; then
menuentry menu_live {
  set root=$efi_live
  set prefix=($root)/grub
  configfile /grub/grub.cfg
}
fi

if [ "${efi_backup}" ]; then
menuentry menu_backup {
  set root=$efi_backup
  set prefix=($root)/grub
  configfile /grub/grub.cfg
}
fi

menuentry windows_bios {
  search --no-floppy --label Windows --set=root
  insmod ntldr
  ntldr /bootmgr
}

# todo - needed to boot windows on henrik
#if [ -s /EFI/Microsoft/Boot/bootmgfw.efi ]; then
menuentry windows {
  # Windows EFI (not BIOS)
  set root=(hd1,1)
  chainloader /EFI/Microsoft/Boot/bootmgfw.efi
}
#fi

menuentry empty_var {
  linux /kernel/vmlinuz $DEFAULT systemd.volatile=state $OVERRIDE
  initrd /kernel/initrd.img
}

menuentry empty_var_console {
  linux /kernel/vmlinuz $DEFAULT $CONSOLE systemd.volatile=state $OVERRIDE
  initrd /kernel/initrd.img
}

# Disable services trying to write to /var/log or /var
menuentry ro_console {
  linux /kernel/vmlinuz $DEFAULT $CONSOLE systemd.volatile=no systemd.mask=dmesg systemd.mask=systemd-update-utmp systemd.mask=systemd-update-utmp-runlevel $OVERRIDE
  initrd /kernel/initrd.img
}

# Drop into shell after initramfs but before boot
menuentry initrd_shell {
  linux /kernel/vmlinuz $DEFAULT debug init=/bin/bash
  initrd /kernel/initrd.img
}

if [ -s "/tce/Core-current.iso" ]; then
menuentry tinycore {
  set isofile="/tce/Core-current.iso"
  loopback loop $isofile
  linux (loop)/boot/vmlinuz iso=$isofile nozswap
  initrd (loop)/boot/core.gz
}
fi

menuentry menu_chain_1 {
  # Chainload first (non-usb/attached to host) disk
  set root=(hd0)
  chainloader +1
}

menuentry menu_chain_2 {
  # Chainload first (non-usb/attached to host) disk
  set root=(hd1)
  chainloader +1
}

menuentry "Windows 7" {
	insmod ntfs
	set root=(hd1,1)
	search --no-floppy --label WinLive --set=root
	chainloader +1
}

# Determine which menu to boot
set default=linux

# allow host to override default
source /dotfiles/boot/grub-$h.cfg

if [ -s /grubenv ]; then
  load_env --file /grubenv
fi

if [ "${saved_entry}" ] ; then
   set default="${saved_entry}"
   unset saved_entry
   save_env --file /grubenv saved_entry
fi
