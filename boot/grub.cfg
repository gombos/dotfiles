# If timeout is not set, boot process will not resume
set timeout=5

# Regular expressions (e.g. for files)
insmod regexp

# initramfs options for dracut
# rd.luks=0 - disable crypto LUKS detection
# rd.lvm=0 - disable LVM detection
# rd.md=0 - disable MD RAID detection
# rd.dm=0 - disable DM RAID detection
# rd.hostonly=0 - removes all compiled in configuration of the host system the initramfs image was built on

# kernel options
# root=LABEL=linux - boot form the partition with "linux" label
# rootflags=subvol=/linux - boot from /linux btrfs subvolume (and not the default filesystem subvolume)
# ro - mount root read-only
# systemd.volatile=overlay - overlay root and all the subfolders with tmpfs
# quiet - do not log to console during boot
# net.ifnames=0 - disable consistent network device naming

# btrfs is not builtin module in the kernel, so initrd is required to boot
# cat /lib/modules/$(uname -r)/modules.builtin | grep btrfs

set original_root=$root
set original_prefix=$prefix

set label=linux

# Detect the environment and partitions

# On some BIOS once you started booting from USB, other internal drives no longer visible to grub
# On some buggy BIOS, search might only work on the current drive

search --no-floppy --set efi_bestia --label EFI_BESTIA
search --no-floppy --set efi_live --label EFI_LIVE
search --no-floppy --set efi_backup --label EFI_BACKUP

set default=0

# detect partitions and set defaults
if [ "$efi_bestia" ]; then
  set h=bestia
elif [ "$efi_backup" ]; then
  set h=backup
  set label=linux_${h}
elif [ "$efi_live" ]; then
  set h=live
  set timeout=10
  set default=linux_${h}_admin
  set label=linux_${h}
else
  set h=linux
fi

# Per host configuration file
source /config/grub-host.cfg

set DEFAULT="root=LABEL=$label rootfstype=btrfs rootflags=subvol=linux ro quiet net.ifnames=0 d.luks=0 rd.lvm=0 rd.md=0 rd.dm=0 rd.hostonly=0 systemd.hostname=$h"
set OVERLAY="systemd.volatile=overlay"
set RDEXEC="$OVERLAY rd.exec=dotfiles/bin/infra-init.sh"
set CONSOLE="nomodeset systemd.unit=multi-user.target debug"

# vt.handoff=7
menuentry linux_${h} {
  linux /kernel/vmlinuz $DEFAULT $RDEXEC $MODULES $SERVICES $OVERRIDE
  initrd /kernel/initrd.img
}

menuentry linux_${h}_console {
  linux /kernel/vmlinuz $DEFAULT $CONSOLE $RDEXEC $MODULES $SERVICES $OVERRIDE
  initrd /kernel/initrd.img
}

# no rdexec
menuentry linux_${h}_admin {
  linux /kernel/vmlinuz $DEFAULT $OVERLAY $MODULES $SERVICES $OVERRIDE
  initrd /kernel/initrd.img
}

menuentry linux_${h}_console_admin {
  linux /kernel/vmlinuz $DEFAULT $CONSOLE $OVERLAY $MODULES $SERVICES $OVERRIDE
  initrd /kernel/initrd.img
}

if [ "${efi_live}" ]; then
menuentry menu_live {
  set root=$efi_live
  set prefix=($root)/grub
  configfile /grub/grub.cfg
}
fi

if [ "${efi_backup}" ]; then
menuentry menu_backup {
  set root=$efi_backup
  set prefix=($root)/grub
  configfile /grub/grub.cfg
}
fi

if [ -s /EFI/Microsoft/Boot/bootmgr.efi ]; then
menuentry windows_bios {
  search --no-floppy --label Windows --set=root
  insmod ntldr
  ntldr /bootmgr
}
fi

if [ -s /EFI/Microsoft/Boot/bootmgfw.efi ]; then
menuentry windows {
  # Windows EFI (not BIOS)
  insmod chain
  chainloader /EFI/Microsoft/Boot/bootmgfw.efi
}
fi

# default for live to avoid executing rd.exec
menuentry linux_live {
  linux /kernel/vmlinuz $DEFAULT systemd.volatile=overlay $MODULES $SERVICES $OVERRIDE
  initrd /kernel/initrd.img
}

menuentry empty_var {
  linux /kernel/vmlinuz $DEFAULT systemd.volatile=state $MODULES $SERVICES $OVERRIDE
  initrd /kernel/initrd.img
}

menuentry empty_var_console {
  linux /kernel/vmlinuz $DEFAULT systemd.volatile=state nomodeset systemd.unit=multi-user.target debug $MODULES $SERVICES $OVERRIDE
  initrd /kernel/initrd.img
}

# Disable services trying to write to /var/log or /var
menuentry ro_console {
  linux /kernel/vmlinuz $DEFAULT systemd.volatile=no nomodeset systemd.unit=multi-user.target systemd.mask=dmesg systemd.mask=systemd-update-utmp systemd.mask=systemd-update-utmp-runlevel debug $MODULES $SERVICES $OVERRIDE
  initrd /kernel/initrd.img
}

# Drop into shell after initramfs but before boot
menuentry initrd_shell {
  linux /kernel/vmlinuz $DEFAULT debug init=/bin/bash
  initrd /kernel/initrd.img
}

if [ -s "/tce/Core-current.iso" ]; then
menuentry tinycore {
  set isofile="/tce/Core-current.iso"
  loopback loop $isofile
  linux (loop)/boot/vmlinuz iso=$isofile nozswap
  initrd (loop)/boot/core.gz
}
fi

menuentry menu_chain {
  # Chain first host disk
  insmod chain
  set root=(hd0)
  chainloader +1
}

menuentry "Windows 7" {
	insmod ntfs
	set root=(hd0,1)
	search --no-floppy --label WinLive --set=root
	chainloader +1
}

# Determine which menu to boot
set default=linux

# allow host to override default
source /dotfiles/boot/grub-$h.cfg

if [ -s /grubenv ]; then
  load_env --file /grubenv
fi

if [ "${saved_entry}" ] ; then
   set default="${saved_entry}"
   unset saved_entry
   save_env --file /grubenv saved_entry
fi
