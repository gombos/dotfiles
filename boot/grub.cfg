# dracut arguments
# rd.luks=0 - disable crypto LUKS detection
# rd.lvm=0 - disable LVM detection
# rd.md=0 - disable MD RAID detection
# rd.dm=0 - disable DM RAID detection
# rd.hostonly=0 - removes all compiled in configuration of the host system the initramfs image was built on
# rd.shell -
# rd.live.ram=1 - copy root to ram (boot medai can be removed after booting, requires more system ram)

# kernel arguments
# root=LABEL=linux - boot form the partition with "linux" label
# rootflags=subvol=/linux - boot from /linux btrfs subvolume (and not the default filesystem subvolume)
# ro - mount root read-only
# systemd.volatile=overlay - overlay root and all the subfolders with tmpfs
# quiet - do not log to console during boot
# net.ifnames=0 - disable consistent network device naming

# Useful arguments
# systemd.wants
# rd.dev=by-label/EFI_XX"
# ds=nocloud;s=/run/media/efi/config
# ip=192.168.1.3::192.168.1.1:255.255.255.0:bestia:eth0:off systemd.wants=ssh-keygen rd.neednet=1

# Detect smbios
smbios --type 2 --get-string 5 --set smbios_system

set timeout=5
set default=linux_default

set CONSOLE="nomodeset systemd.unit=multi-user.target"
set EMPTRY_VAR="systemd.volatile=state"
set SUBVOL="rootflags=subvol=linux-dev"

# Default hostname
set h=linux

# Disable services trying to write to /var/log or /var
set RO="$CONSOLE systemd.volatile=no systemd.mask=dmesg systemd.mask=systemd-update-utmp systemd.mask=systemd-update-utmp-runlevel"

if [ "$smbios_system" == "DX79TO" ]; then
# module_blacklist=nouveau - this is required to load nvidia. nouveau is not stable on bestia
  set h=bestia
  set timeout=1
  OVERRIDE="module_blacklist=nouveau systemd.mask=NetworkManager.service systemd.mask=NetworkManager-wait-online.service"
fi

if [ "$smbios_system" == "NEO Z83-4" ]; then
  set h=pincer
  set timeout=0

  # Disable Wifi, bluetooth, sound kernel modules
  # dw_dmac and dw_dmac_core can cause hang at reboot on Minix
  OVERRIDE="module_blacklist=bluetooth,nouveau,cfg80211,soundcore,dm_mirror,dw_dmac,dw_dmac_core systemd.mask=dmesg.service systemd.mask=getty@tty1.service systemd.mask=NetworkManager.service systemd.mask=NetworkManager-wait-online.service systemd.unit=multi-user.target systemd.wants=nginx.service"
fi

if [ "$smbios_system" == "Mac-3CBD00234E554E41" ]; then
  set h=taska
fi

# vmware
if [ "$smbios_system" == "440BX Desktop Reference Platform" ]; then
  set timeout=0
  set timeout_style=hidden

  OVERRIDE="systemd.mask=bluetooth.service systemd.mask=getty@tty1.service systemd.mask=vgauth.service systemd.mask=smartmontools.service systemd.mask=ssh.service systemd.mask=NetworkManager.service systemd.mask=NetworkManager-wait-online.service"
fi

# determine default menu item

# set isolabel to partition label for ISO files
set isolabel=iso

# Default rootfs label
set l=linux

# Look for isos
search --no-floppy --label $isolabel --set=linuxroot

if [ -n "$linuxroot" ]; then
  set default=kucko
else
  # cdrom bios boot
  if [ "$root" == "hd31" ]; then
    root=(cd,msdos1)
    set default=linux_isoboot
  fi
  if [ "$root" == "cd0" ]; then
    set default=linux_isoboot
  fi
fi

set D="ro net.ifnames=0 systemd.volatile=overlay systemd.hostname=$h grub_root=$root grub_system=$smbios_system quiet"
set DEFAULT="root=LABEL=$l rootfstype=btrfs $D"
# todo - add support for persistent overlay rd.live.overlay rd.live.overlay.readonly=1
set DEFAULT_ISO="rd.live.image root=live:CDLABEL=LINUX $D"

if [ -s /dotfiles/bin/infra-init.sh ]; then
  set RDEXEC="rd.exec=dotfiles/bin/infra-init.sh"
fi

if [ -s /config/grub.cfg ]; then
  source /config/grub.cfg
fi

menuentry linux_default $DEFAULT $RDEXEC $OVERRIDE {
  linux /kernel/vmlinuz $*
  initrd /kernel/initrd.img
}

# Optical drive (CD)
menuentry linux_isoboot {
  linux /kernel/vmlinuz rd.dev=by-label/LINUX $DEFAULT_ISO $OVERRIDE
  initrd /kernel/initrd.img
}

menuentry linux_isodd {
  linux /kernel/vmlinuz $DEFAULT_ISO
  initrd /kernel/initrd.img
}

########### Chain

menuentry menu_chain_0 {
  # hd0 is the best guess for the disk attached to the host
  set root=(hd0,1)
  chainloader +1
}

# Test booting from backup
menuentry menu_chain_1 {
  set root=(hd1,1)
  chainloader +1
}

menuentry menu_backup {
  search --no-floppy --set efi_backup --label EFI_BACKUP
  set root=$efi_backup
  configfile /efi/boot/grub.cfg
}

menuentry menu_live {
  search --no-floppy --set efi_live --label EFI_LIVE
  set root=$efi_live
  configfile /efi/boot/grub.cfg
}

########### netboot

# PXE boot - requires wired networking
# Debian based distros (debian, ubuntu, mint, popos, elementary, zorin, kdeneon, deepin, kali, sparkylinux, Q4OS, tails)
# hrmpf (void), tinycore, fatdog, endeavouros (arch), fedora (rpm)
# console boot and installer (bsd, alpine, arch, centos)
menuentry netboot {
  if [ "${grub_platform}" == "efi" ]; then
    chainloader /netboot/netboot.xyz.efi
  else
    linux16 /netboot/netboot.xyz.lkrn
  fi
}

########### Tinycore

if [ -s "/tce/Core-current.iso" ]; then
menuentry tinycore {
  set isofile="/tce/Core-current.iso"
  loopback loop $isofile
  linux (loop)/boot/vmlinuz iso=$isofile nozswap
  initrd (loop)/boot/core.gz
}
fi

########### Windows

menuentry windows_bios {
  search --no-floppy --label Windows --set=root
  ntldr /bootmgr
}

menuentry windows_efi {
  # Windows EFI (not BIOS)
  chainloader /EFI/Microsoft/Boot/bootmgfw.efi
}

menuentry windows {
	search --no-floppy --label Windows --set=root
	chainloader +1
}

########### ISOs

# rd.live.overlay=none rd.live.overlay.readonly
menuentry kucko {
  search --no-floppy --label $isolabel --set=linuxroot
  set isofile="/linux.iso"
  loopback loop ($linuxroot)/$isofile
  linux (loop)/kernel/vmlinuz iso-scan/filename=$isofile $DEFAULT_ISO
  initrd (loop)/kernel/initrd.img
}

menuentry bestia_kucko {
  search --no-floppy --label linux --set=linuxroot
  set isofile="/linux.iso"
  loopback loop ($linuxroot)/$isofile
  linux (loop)/kernel/vmlinuz iso-scan/filename=$isofile $DEFAULT_ISO
  initrd (loop)/kernel/initrd.img
}

# deb, kernel5.11, lightweight, LXQt, openbox
menuentry lubuntu {
  search --no-floppy --label $isolabel --set=linuxroot
  set isofile="/lubuntu-20.04.3-desktop-amd64.iso"
  loopback loop ($linuxroot)/$isofile
  linux (loop)/casper/vmlinuz boot=casper iso-scan/filename=$isofile noprompt noeject --
  initrd (loop)/casper/initrd
}

# deb, kernel5.10, chromium, most packages
menuentry knoppix {
  search --no-floppy --label $isolabel --set=linuxroot
  set isofile="/KNOPPIX_V9.1DVD-2021-01-25-EN.iso"
  loopback loop ($linuxroot)/$isofile
  linux (loop)/boot/isolinux/linux64 bootfrom=/mnt-iso/$isofile lang=en no3d
  initrd (loop)/boot/isolinux/minirt.gz
}

# rpm, kernel5.11, RedHat, GNOME
menuentry fedora {
  search --no-floppy --label hfs_live --set=linuxroot
  set isofile="/Fedora-Workstation-Live-x86_64-34-1.2.iso"
  loopback loop ($linuxroot)/$isofile
  linux (loop)/isolinux/vmlinuz iso-scan/filename=$isofile root=live:CDLABEL=Fedora-WS-Live-34-1-2 rd.live.image
  initrd (loop)/isolinux/initrd.img
}

# arch, kernel5.10 consoleboot, xfce, sshd, small image, runram
menuentry systemrescue {
  search --no-floppy --label $isolabel --set=linuxroot
  set iso="/systemrescue-8.04-amd64.iso"
  loopback loop ($linuxroot)/$iso
  linux (loop)/sysresccd/boot/x86_64/vmlinuz img_label=$isolabel img_loop=$iso archisobasedir=sysresccd copytoram setkmap=us nofirewall dodhcp rootpass=root
  initrd (loop)/sysresccd/boot/intel_ucode.img (loop)/sysresccd/boot/amd_ucode.img (loop)/sysresccd/boot/x86_64/sysresccd.img
}

if [ -s /grubenv ]; then
  load_env --file /grubenv
fi
